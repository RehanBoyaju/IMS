@using Microsoft.AspNetCore.Authorization
@using NetcodeHub.Packages.Components.Validations.OnInput
@attribute [Authorize(Policy = "AdministrationPolicy")]
@rendermode InteractiveServer
@implements IDisposable
@page "/administration/account/create-user"
<PageTitle>Add User</PageTitle>
<AdminHomeHeader />

<ThreeSectionsTemplate>
    <Col9Template>
        <NetcodeHubBreadCrumb BreadCrumbs="BreadCrumbs" BackgroundColor="@BreadCrumbBackgroundColor.InfoSubtle()"></NetcodeHubBreadCrumb>
        <div class="card col-xl-10 col-lg-12 bg-light shadow-lg border-0 mt-3" style="border-radius:24px">
            <EditForm Model="UserModel" OnValidSubmit="RegisterAsync">
                <div class="card border-success bg-light shadow-lg text-dark" style="opacity:0.8; border-radius:24px">
                    <div class="card-header text-dark fs-4 border-primary text-center">
                        <i class="mdi mdi-account-plus menu-icon float-start text-success"></i>
                        <span style="font-family:Algerian; letter-spacing:2px" class="fw-bold text-success">
                            Add New User
                        </span>
                        <button type="reset" class="btnbtn-outline-danger btn-sm float-end">Reset</button>
                    </div>
                    <div class="card-body p-3" style="opacity:1">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <FloatingText class="form-control mb-3" Label ="Full Name" Placeholder="John" @bind-Value="UserModel.Name"></FloatingText>
                        <FloatingText class="form-control mb-3" Label="Email Address" Placeholder="JohnDoe@email.com" @bind-Value="UserModel.Email"></FloatingText>

                        <InputSelect @bind-Value= "UserModel.Policy" class="form-select mb-3">
                            <option>Select Policy</option>
                            @foreach(var policy in Policies)
                            {
                                <option value="@policy">@policy</option>
                            }
                        </InputSelect>
                        <FloatingText Label ="User Password" Type="@passwordState.PasswordType" class="form-control" @bind-Value="UserModel.Password"></FloatingText>
                        <FloatingText Label="Confirm Password" Type="@passwordState.PasswordType" class="form-control" @bind-Value="UserModel.ConfirmPassword"></FloatingText>
                        <a class="btn btn-link text-decoration-none float-end" style="margin-top:-20px" @onclick="ChangePasswordType"><small>@passwordState.DisplayText</small></a>
                        <div class="form-group align-content-end">
                            @if (Loading)
                            {
                                <GenericSpinnerButton ButtonClass="btn btn-success w-50 mt-4 float-end" Text="Creating Account..."></GenericSpinnerButton>
                            }
                            else
                            {
                                <button class="float-end btn btn-success mt-4 w-50" type="submit">Create User</button>
                            }
                        </div>
                        <hr class="text-primary" />
                    </div>
                    <div class="card-footer mt-5">
                        <ValidationSummary class="form-control text-danger text-decoration-none p-4" style="list-style:lower-latin; text-align:left"/>
                    </div>
                </div>
            </EditForm>
        </div>
    </Col9Template>
    <Col3Template>
        <Banner/>
    </Col3Template>
    @* <FooterTemplate> or 2 sections template *@

    @* </FooterTemplate> *@
</ThreeSectionsTemplate>

<NetcodeHubToast @ref="ToastComponent" Duration="4000"></NetcodeHubToast>
@code {
    private ClaimsPrincipal? User;
    private Dictionary<string, string?> BreadCrumbs = new Dictionary<string, string?>
    {
        {"Home","app/home"},
        {"Add New User",null}
    };


    [SupplyParameterFromForm]
    private RegisterUserRequestDTO UserModel { get; set; } = new();

    NetcodeHubToast? ToastComponent;
    private bool Loading = false;
    List<string> Policies = new()
    {
        new string (Policy.AdminPolicy),
        new string(Policy.ManagerPolicy),
        new string(Policy.UserPolicy)
    };

    private HubConnection? hubConnection;
    private async Task RegisterAsync()
    {
        if (User == null)
        {
            return;
        }
        Loading = true;
        var response = await accountService.RegisterAsync(UserModel);
        await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
        {

        UserId = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value.ToString(),
                Title = "Create New User Method Called",
                Description = response.Message,
                OperationState = response.Flag,
                Date = DateTime.Now.Date
            });
        if (response.Flag)
        {
            await ToastComponent!.ShowSuccessToast("Info", response.Message);
            UserModel = new();
        }
        else
        {
            await ToastComponent!.ShowErrorToast("Alert", response.Message);
        }
        Loading = false;
    }

    protected async override Task OnInitializedAsync()
    {
        User = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        if (!customAuthorizationService.CustomClaimChecker(User, DefaultClaims.ManageUser)){
            NavigationManager.NavigateTo("Account/Access-Denied");
        }
        passwordState.Changed += StateHasChanged;
        homeGenericState.StateChanged += StateButtonClicked;
        hubConnection = hubConnectionService.GetHubConnection();
        hubConnection!.On<string>("Notify", async (clientId) =>
        {
            await CallWhenNotified();
        });
        if(hubConnection is null)
        {
            await hubConnection!.StartAsync();
        }
    }
    async Task CallWhenNotified()
    {
        await InvokeAsync(async () =>
        {
            StateHasChanged();
            await adminState.GetActiveOrdersCount();
        });
    }

    //Navigate to order pages when state buttons are clicked
    void StateButtonClicked()
    {
        string adminOrderUrl = "administration/products/orders";
        if (homeGenericState.IsAdmin)
        {
            NavigationManager.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");
        }
    }
    void ChangePasswordType() => passwordState.ChangePasswordType();

    public void Dispose()
    {
        homeGenericState.StateChanged -= StateButtonClicked;
        passwordState.Changed -= StateHasChanged;
    }

}
