@page "/"
@page "/app/home"
@page "/home"
@implements IDisposable

<PageTitle>Home</PageTitle>
<ThreeSectionsTemplate>
    <Col9Template>
        <HomePageGraph></HomePageGraph>
    </Col9Template>
    <Col3Template><Banner/></Col3Template>
</ThreeSectionsTemplate>
@code {
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        homeGenericState.StateChanged += StateButtonClicked;
        hubConnection = hubConnectionService.GetHubConnection();
        hubConnection.On<string>("Notify", async (clientId) =>
        {
            await CallWhenNotified();
        });
        if(hubConnection== null)
        {
            await hubConnection!.StartAsync();
        }
        try
        {
            //await AccountService.SetupAsync();
            var user = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
            if (user.Identity!.IsAuthenticated == false)
            {
                NavigationManager.NavigateTo("Account/Login", false, true);
            }
        }
        catch
        {
            NavigationManager.NavigateTo("Account/Login", false, true);
        }

    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string state = await localStorageService.GetEncryptedItemAsStringAsync("reload");
            if (string.IsNullOrEmpty(state))
            {
                await localStorageService.SaveAsEncryptedStringAsync("reload", "false");
                NavigationManager.NavigateTo("home", true);
            }
            else
            {
                await localStorageService.DeleteItemAsync("reload");
            }
        }
    }
    async Task CallWhenNotified()
    {
        await InvokeAsync(async () =>
        {
            StateHasChanged();
            await adminState.GetActiveOrdersCount();
        });
    }

    public void Dispose()
    {
        homeGenericState.StateChanged -= StateButtonClicked;
    }

    void StateButtonClicked()
    {
        string adminOrderUrl = "administration/products/orders";
        string clientOrderUrl = "products/orders";
        if (homeGenericState.IsAdmin)
        {
            NavigationManager.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");
        }
        else
        {
            NavigationManager.NavigateTo($"{clientOrderUrl}/{homeGenericState.StateName}");

        }
    }
}