
@using MediatR
@using NetcodeHub.Packages.Extensions.LocalStorage
@using Syncfusion.Blazor.Charts
@inject IServiceProvider serviceProvider
@rendermode InteractiveServer
<div class="row">
    <div class="card shadow-lg border-1">
        <div class="card-body">
            @if (ProductOrderedByMonthsResponseDTOs.Count() == 0)
            {
                <HomeSkeletonLoader/>
            }
            else
            {
                <SfChart Title="Product Orders Analysis" Palettes="@chart1">
                    <ChartPrimaryYAxis LabelFormat="c" Title="Total Amount in Dollar"></ChartPrimaryYAxis>
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Months"></ChartPrimaryXAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@ProductOrderedByMonthsResponseDTOs"
                                     XName="MonthName" 
                                     YName="TotalAmount"
                                     Type="ChartSeriesType.Column">
                        </ChartSeries>
                    </ChartSeriesCollection>
                </SfChart>    
            }
        </div>
        
        <div class="card-body mt-3">
            @if (OrderedProductWithQuantityResponseDTOs.Count() == 0)
            {
                <HomeSkeletonLoader />
            }
            else
            {
                <SfChart Title="Product Orders Analysis" Palettes="@chart2">
                    <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double"  Title="Quantity"></ChartPrimaryYAxis>
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Product"></ChartPrimaryXAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@OrderedProductWithQuantityResponseDTOs"
                                     XName="ProductName"
                                     YName="QuanitityOrdered"
                                     Type="ChartSeriesType.Column">
                        </ChartSeries>
                    </ChartSeriesCollection>
                </SfChart>


            }
        </div>
    </div>
</div>

@code {
    public String[] chart1 = new String[] { "#F6B53F" };
    public String[] chart2 = new String[] { "#00CCCD" };

    private IEnumerable<GetProductOrderByMonthsResponseDTO> ProductOrderedByMonthsResponseDTOs = [];
    private IEnumerable<GetOrderedProductWithQuantityResponseDTO> OrderedProductWithQuantityResponseDTOs = [];
    ClaimsPrincipal? User;
    private string Role = string.Empty;
    private string UserId = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        User = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        if(User != null)
        {
            Role = User.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.Role)!.Value;
            UserId = User.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.NameIdentifier)!.Value;

        }


    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await GetChartData1();
            await GetChartData2();
            StateHasChanged();

        }
    }
    async Task GetChartData1()
    {
        using (var scope = serviceProvider.CreateScope())
        {
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            if (Role.Equals("Admin"))
            {
                ProductOrderedByMonthsResponseDTOs = await mediator.Send(new GetProductOrderByMonthsQuery(null));
            }
            else
            {
                ProductOrderedByMonthsResponseDTOs = await mediator.Send(new GetProductOrderByMonthsQuery(UserId));
            }
        }
    }
    async Task GetChartData2()
    {
        try
        {
            using (var scope = serviceProvider.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                if (Role.Equals("Admin"))
                {
                    OrderedProductWithQuantityResponseDTOs = await mediator.Send(new GetOrderedProductsWithQuantityQuery(null));
                }
                else
                {
                    OrderedProductWithQuantityResponseDTOs = await mediator.Send(new GetOrderedProductsWithQuantityQuery(UserId));
                }
            }
        }
        catch(Exception ex)
        {

            Console.WriteLine($"An error occured : {ex.Message}");
        }
    }
}
