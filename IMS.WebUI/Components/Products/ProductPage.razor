@page "/products/manage"
@using IMS.Application.Service.Products.Queries.Products
@using MediatR
@using Microsoft.AspNetCore.Authorization
@using NetcodeHub.Packages.Components.Validations.OnInput
@using Syncfusion.Blazor.Grids
@implements IDisposable
@rendermode InteractiveServer
@attribute [Authorize(Policy = "AdministrationPolicy")]
<PageTitle>Products</PageTitle>
<TwoSectionsTemplate>
    <Col12Template>
        <AdminHomeHeader />
        <NetcodeHubBreadCrumb BreadCrumbs="BreadCrumbs" DeactivatedColor="@Color.Primary()" BackgroundColor="@BreadCrumbBackgroundColor.SecondarySubtle()"></NetcodeHubBreadCrumb>
        <div class="row bg-primary py-2 mt-3" style="border-radius:20px;">
            <div class="col-lg-12 col-sm-12 col-md-12">
                <div class="card border-1 shadow-lg" style="border-radius:20px">
                    <div class="card-header">
                        <button class="btn btn-outline-primary float-end" @onclick="CreateProductBtnClicked">
                            <i class="mdi mdi-plus"></i>
                        </button>
                    </div>
                    <div class="card-body border-1 border-primary">
                        <div class="mb-5">
                            <input type="search" class="form-control float-end w-25 mb-2 p-2 border-secondary" placeholder="Search name, desc, serial no." @onchange="SearchProduct" />
                        </div>
                        <SfGrid DataSource="@PermanentProducts" AllowPaging="true" AllowSorting="true" AllowExcelExport="true" style="margin-top:35px" AllowGrouping="true" AllowPdfExport="true" Toolbar="Toolbaritems" AllowSelection="true" AllowResizing="true" @ref="DefaultGrid">
                            <GridPageSettings PageSize="5"></GridPageSettings>
                            <GridSelectionSettings Type="SelectionType.Single" Mode="SelectionMode.Both"></GridSelectionSettings>
                            <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="GetProductResponseDTO" RowSelected="RowSelectHandler"></GridEvents>
                            <GridColumns>
                                <GridColumn HeaderText="Image" AllowFiltering=false>
                                    <Template>
                                        @{
                                            var product = (context as GetProductResponseDTO);
                                            <div class="image">
                                                <img src="@(product!.Base64Image)" alt="@product.Name" width="70" height="50" />
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field=@nameof(GetProductResponseDTO.DateAdded) HeaderText="Date" Format="d" Type="ColumnType.Date"></GridColumn>
                                <GridColumn Field=@nameof(GetProductResponseDTO.Id) HeaderText="ID"></GridColumn>
                                <GridColumn Field=@nameof(GetProductResponseDTO.Name) HeaderText="Name"></GridColumn>
                                <GridColumn Field=@nameof(GetProductResponseDTO.SerialNumber) HeaderText="Serial No"></GridColumn>
                                <GridColumn Field=@nameof(GetProductResponseDTO.Price) HeaderText="Price" Format="C2" Type="ColumnType.Decimal"></GridColumn>
                                <GridColumn Field=@nameof(GetProductResponseDTO.Quantity) HeaderText="Quantity" Type="ColumnType.Integer"></GridColumn>
                                <GridColumn HeaderText="Category" AllowFiltering=false>
                                    <Template>
                                        @{
                                            var product = (context as GetProductResponseDTO);
                                            <p>@(product!.Category.Name)</p>
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn HeaderText="Location" AllowFiltering=false>
                                    <Template>
                                        @{
                                            var product = (context as GetProductResponseDTO);
                                            <p>@(product!.Location.Name)</p>
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field=@nameof(GetProductResponseDTO.Description) HeaderText="Description"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                </div>
            </div>
        </div>
        <NetcodeHubModal @bind-Open="IsOpen" BootstrapClass="border-primary rounded p-2 ml-2" CustomStyle="@ModalCustomStyle">
            <ContentTemplate>
                @if (ShowProductPage)
                {
                    <div class="card border-1 shadow-sm">
                        <div class="card-header">
                            <i class="mdi mdi-folder-plus text-primary fs-4 px-3 menu-icon text-start"></i>
                            <span class="text-cetner text-primary fw-bold">@ModalTitle</span>
                            <i class="mdi mdi-close text-primary fw-bold float-end fs-4 cursorStyle" @onclick="CloseModal"></i>
                        </div>
                        <div class="card-body">
                            <EditForm Model="ProductModel" OnValidSubmit="SaveProduct" Enhance>
                                <DataAnnotationsValidator/>
                                <ValidationSummary/>
                                <div class="form-group">
                                    <FloatingText Label="Product Name" @bind-Value="ProductModel.Name" class="form-control"/>
                                </div>
                                <div class="form-group">
                                    <FloatingText Label="Product Serial Number" @bind-Value="ProductModel.SerialNumber" class="form-control"></FloatingText>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Product Price</label>
                                    <InputNumber @bind-Value="ProductModel.Price" class="form-control"></InputNumber>
                                </div>
                                <div class="form-group">
                                    <FloatingNumber Label="Product Quantity" @bind-Value="ProductModel.Quantity" class="form-control w-100"></FloatingNumber>
                                </div>
                                <div class="form-group">
                                    <FloatingTextArea Label="Product Description" @bind-Value="ProductModel.Description" class="form-control w-100"></FloatingTextArea>
                                </div>
                                <div class="form-group">
                                    <NetcodeHubFileUpload @ref="FileUploadComponent" Notify="RetrieveContent" RequiredExtensions="RequiredEx" />

                                </div>
                                <div class="form-group mt-0">
                                    <label class="form-label">Select Category</label>
                                    <select class="form-select mb-3" @onchange="CategorySelectionChanged">
                                        @if (Categories != null)
                                        {
                                            if (SelectedProduct.Id != Guid.Empty)
                                            {
                                                <option value="@SelectedProduct.CategoryId">@SelectedProduct.Category.Name</option>
                                            }
                                            else
                                            {
                                                <option>Select Category</option>
                                            }
                                            @foreach (var cat in Categories)
                                            {
                                                if (SelectedProduct.CategoryId != cat.Id)
                                                {
                                                    <option value="@cat.Id">@cat.Name</option>
                                                }
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="form-group mt-0">
                                    <label class="form-label">Select Location</label>
                                    <select class="form-select mb-3" @onchange="LocationSelectionChanged">
                                        @if (Locations != null)
                                        {
                                            if (SelectedProduct.Id != Guid.Empty)
                                            {
                                                <option value="@SelectedProduct.LocationId">@SelectedProduct.Location.Name</option>
                                            }
                                            else
                                            {
                                                <option>Select Location</option>
                                            }
                                            @foreach (var loc in Locations)
                                            {
                                                if (SelectedProduct.LocationId != loc.Id)
                                                {
                                                    <option value="@loc.Id">@loc.Name</option>
                                                }
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="form-group mt-2">
                                    @if (Loading)
                                    {
                                        <GenericSpinnerButton Text="Saving Product.." ButtonClass="btn btn-primary"></GenericSpinnerButton>
                                    }
                                    else
                                    {
                                        @if (ProductModel.Base64Image != null)
                                        {
                                            <img width="50" style="border-radius:100%" src="@ProductModel.Base64Image" class="float-start" />
                                        }
                                        <button type="submit" class="btn btn-primary float-end">Save Product</button>
                                    }
                                </div>
                                <div class="form-group mt-2">
                                    @if (Errors != "")
                                    {
                                        @Errors
                                    }
                                </div>
                            </EditForm>
                        </div>
                    </div>
                }
                @if (ShowConfirmationPage)
                {
                    <div class="card">
                        <div class="card-header d-flex justify-content-between">
                            <i class="d-flex mdi mdi-delete-sweep text-danger fs-4 px-3 menu-icon text-start"></i>
                            <span class="d-flex text-center fw-bold">Confirm Product Deletion</span>
                            <i class="d-flex mdi mdi-close text-danger fw-bold float-end fs-4 cursorStyle" @onclick="CloseModal"></i>
                        </div>
                        <div class="card-body">
                            Are you sure you want to delete this Product?
                        </div>
                        <div class="card-footer">
                            @if (Loading)
                            {
                                <GenericSpinnerButton Text="Deleting.." ButtonClass="btn btn-danger">
                                </GenericSpinnerButton>
                            }
                            else
                            {
                                <button class="btn btn-danger float-end" type="button" @onclick="ConfirmDelete">
                                    <i class="mdi mdi-delete"></i>
                                    Confirm
                                </button>
                            }
                        </div>
                    </div>
                }
            </ContentTemplate>
        </NetcodeHubModal>
    </Col12Template>
</TwoSectionsTemplate>
<NetcodeHubToast @ref="ToastComponent"></NetcodeHubToast>
@code {
    private GetProductResponseDTO SelectedProduct = new();

    private ClaimsPrincipal? User;
    private Dictionary<string, string?> BreadCrumbs = new Dictionary<string, string?>
    {
        {"Home","app/home"},
        {"Manage Products",null}
    };
    string ModalTitle = "New Product";
    private SfGrid<GetProductResponseDTO>? DefaultGrid;
    NetcodeHubToast? ToastComponent;
    string ModalCustomStyle = string.Empty;
    string Search = string.Empty;
    List<string> RequiredEx = [".jpg", ".png"];
    NetcodeHubFileUpload? FileUploadComponent;
    string Errors = "";
    private bool ShowProductPage;
    private bool ShowConfirmationPage;
    private List<ItemModel> Toolbaritems = new();
    public bool Loading { get; set; } = false;
    public int Duration { get; set; }
    public bool IsOpen { get; set; }
    private IEnumerable<GetProductResponseDTO> Products { get; set; } = [];
    private IEnumerable<GetProductResponseDTO> PermanentProducts { get; set; } = [];
    private IEnumerable<GetCategoryResponseDTO> Categories { get; set; } = [];
    private IEnumerable<GetLocationResponseDTO> Locations { get; set; } = [];
    private AddProductRequestDTO ProductModel { get; set; } = new();
    private HubConnection? hubConnection;
    bool CanDelete = false;
    protected override async Task OnInitializedAsync()
    {
        User = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        CanDelete = customAuthorizationService.CustomClaimChecker(User, DefaultClaims.Delete);
        homeGenericState.StateChanged += StateButtonClicked;

        await GetDefaults();
        LoadToolbarItems();
        hubConnection = hubConnectionService.GetHubConnection();
        hubConnection!.On<string>("Notify", async (clientId) =>
        {
            await CallWhenNotified();
        });
        if (hubConnection == null)
        {
            await hubConnection!.StartAsync();
        }
    }
    private async Task CallWhenNotified()
    {
        await InvokeAsync(async () =>
        {
            StateHasChanged();
            await adminState.GetActiveOrdersCount();
        });
    }
    void StateButtonClicked()
    {
        string adminOrderUrl = "administration/products/orders";

        if (homeGenericState.IsAdmin)
        {
            NavigationManager.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");
        }

    }
    private async Task GetDefaults()
    {
        await GetProducts();
        await GetLocations();
        await GetCategories();
    }
    private async Task GetCategories()
    {
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        Categories = await mediator.Send(new GetAllCategoriesQuery());
    }

    private async Task GetProducts()
    {
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        Products = await mediator.Send(new GetProductQuery());
        PermanentProducts = Products;
    }
    private async Task GetLocations()
    {
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        Locations = await mediator.Send(new GetAllLocationsQuery());
    }

    void LoadToolbarItems()
    {
        if (CanDelete)
        {
            Toolbaritems.Add(new ItemModel() { Text = "Delete", TooltipText = "Delete Product", PrefixIcon = "e-trash" });
        }
        Toolbaritems.Add(new ItemModel() { Text = "View", TooltipText = "View Product", PrefixIcon = "e-eye" });
        Toolbaritems.Add(new ItemModel() { Text = "Edit", TooltipText = "Edit Product", PrefixIcon = "e-edit" });
        Toolbaritems.Add(new ItemModel() { Text = "PDF", TooltipText = "Export to PDF", PrefixIcon = "e-icons e-export-pdf" });
        Toolbaritems.Add(new ItemModel() { Text = "EXCEL", TooltipText = "Export to Excel", PrefixIcon = "e-icons e-export-xls" });
        Toolbaritems.Add(new ItemModel() { Text = "Print", TooltipText = "Print", PrefixIcon = "e-print" });


    }
    void OpenModal() => IsOpen = true;

    void CreateProductBtnClicked()
    {
        ModalTitle = "New Product";
        ResetModalDisplay();
        ModalCustomStyle = "positon:relative; left:45vw; top:10vh ;min-width:250px";
        ShowProductPage = true;
        ProductModel = new();
        OpenModal();
    }
    void CloseModal() => IsOpen = false;
    private Guid IdHolder { get; set; } = Guid.Empty;

    public async Task SaveProduct()
    {
        Loading = true;
        await Task.Delay(3000);
        ServiceResponse response = new(false, null);
        if(IdHolder != Guid.Empty)
        {
            var update = ProductModel.Adapt(new UpdateProductRequestDTO());
            update.Id = IdHolder;
            using var scope = serviceProvider.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            response = await mediator.Send(new UpdateProductCommand(update));
            await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
                {
                    UserId = User.Claims.FirstOrDefault(u => u.Type == ClaimTypes.NameIdentifier)!.Value.ToString(),
                    Title = "Update Product Method called",
                    Description = response.Message,
                    OperationState = response.Flag,
                    Date = DateTime.Now.Date
                });
            Loading = false;
            StateHasChanged();
        }
        else
        {
            using var scope = serviceProvider.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            response = await mediator.Send(new CreateProductCommand(ProductModel));
            await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
                {
                    UserId = User!.Claims.FirstOrDefault(u => u.Type == ClaimTypes.NameIdentifier)!.Value.ToString(),
                    Title = "Create Product Method called",
                    Description = response.Message,
                    OperationState = response.Flag,
                    Date = DateTime.Now.Date
                });
            Loading = false;
            StateHasChanged();

        }
        if (response.Flag)
        {
            CloseModal();
            await GetProducts();
            PermanentProducts = Products;
            await ToastComponent!.ShowSuccessToast("Info", response.Message);
            ProductModel = new();
            SelectedProduct = new();

        }
        else
        {
            await ToastComponent!.ShowErrorToast("Alert", response.Message);
        }
        Loading = false;
    }
    public void RetrieveContent(NetcodeHubUploadModel files)
    {
        FileModel incomingFiles = files.FileModel!;
        if (incomingFiles is null) return;
        foreach(var file in incomingFiles!.IBrowserFiles!)
        {
            var getFileNameAndBase64 = incomingFiles.BaseFiles!.FirstOrDefault(_=>_.Key.Equals(file.Name,StringComparison.OrdinalIgnoreCase));
            if (getFileNameAndBase64.Key != null)
            {
                ProductModel.Base64Image = getFileNameAndBase64.Value;
            }
        }
    }
    void CategorySelectionChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e) => ProductModel.CategoryId = Guid.Parse(e.Value!.ToString()!);
    void LocationSelectionChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e) => ProductModel.LocationId = Guid.Parse(e.Value!.ToString()!);

    async Task ToolbarClickHandler(ClickEventArgs e)
    {
        if(e.Item.Text.ToLower() == "excel")
        {
            await this.DefaultGrid!.ExportToExcelAsync();
        }
        else if(e.Item.Text.ToLower() == "pdf")
        {
            await this.DefaultGrid!.ExportToPdfAsync();

        }
        else if (e.Item.Text.ToLower() == "print")
        {
            await this.DefaultGrid!.PrintAsync();

        }
        else if (e.Item.Text.ToLower() == "view")
        {
            bool check = await CheckIfRowSelected();
            if (check)
            {
                NavigationManager.NavigateTo($"products/details/{SelectedProduct.Id.ToString()}");
            }

        }
        else if (e.Item.Text.ToLower() == "add")
        {
            ProductModel = new();
            OpenModal();
        }
        else if (e.Item.Text.ToLower() == "edit")
        {
            bool check = await CheckIfRowSelected();
            if (check)
            {
                ResetModalDisplay();
                ModalCustomStyle = "position:relative; left:45vw; top:10vh; min-width:250px";
                ModalTitle = "Update Product";
                SelectedProduct.Adapt(ProductModel);
                IdHolder= SelectedProduct.Id;
                ShowProductPage = true;
                OpenModal();
            }
        }
        else if (e.Item.Text.ToLower() == "delete")
        {
            if(await CheckIfRowSelected())
            {
                ResetModalDisplay();
                ModalCustomStyle = "position:relative; left:40vw; top:45vh;";
                ShowConfirmationPage = true;
                OpenModal();
            }
        }
    }
    async Task ConfirmDelete()
    {
        Loading = true;
        await Task.Delay(3000);
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var response = await mediator.Send(new DeleteProductCommand(SelectedProduct.Id));
        await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
            {
                UserId = User!.Claims.FirstOrDefault(u => u.Type == ClaimTypes.NameIdentifier)!.Value.ToString(),
                Title = "Delete Product Method called",
                Description = response.Message,
                OperationState = response.Flag,
                Date = DateTime.Now.Date
            });

        if (response.Flag)
        {
            await GetProducts();
            PermanentProducts = Products;
            await ToastComponent!.ShowSuccessToast("Info", response.Message);
            SelectedProduct = new();
            CloseModal();

        }
        else
        {
            await ToastComponent!.ShowErrorToast("Alert", response.Message);
        }
        Loading = false;
    }
    private async Task<bool> CheckIfRowSelected()
    {
        if(SelectedProduct.Id == Guid.Empty)
        {
            Duration=2000;
            await ToastComponent!.ShowErrorToast("Alert", "No row selected");
            return false;
        }
        return true;
    }
    public void RowSelectHandler(RowSelectEventArgs<GetProductResponseDTO> args)
    {
        SelectedProduct = args.Data;
    }
    void SearchProduct(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        try{
            string trimFilter = e.Value!.ToString()!.Trim();
            PermanentProducts = Products.Where(_ => _.Name.Contains(trimFilter, StringComparison.OrdinalIgnoreCase) ||
                                                                                    _.SerialNumber.Contains(trimFilter, StringComparison.OrdinalIgnoreCase) ||
                                                                                    _.Description.Contains(trimFilter, StringComparison.OrdinalIgnoreCase)) 
                                                                                      .ToList();
        }
        catch
        {
            PermanentProducts = null;
        }
    }
    private void ResetModalDisplay()
    {
        ShowProductPage= false;
        ShowConfirmationPage = false;
        ModalCustomStyle = "";
    }
    public void Dispose() => homeGenericState.StateChanged -= StateButtonClicked;
}

